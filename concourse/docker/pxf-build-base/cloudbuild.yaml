# In this directory, run the following command to build this builder.
# $ gcloud builds submit . --config=cloudbuild.yaml

# Increase timeout to 20 minutes
timeout: 1200s

steps:
  # download and extract the existing dependencies
  - name: 'gcr.io/cloud-builders/gsutil'
    id: retrieve-pxf-build-dependencies
    args: [ 'cp', 'gs://${_PXF_BUILD_BUCKET}/build-dependencies/pxf-build-dependencies.tar.gz', 'pxf-build-dependencies.tar.gz' ]
    waitFor: [ '-' ]
  - name: 'gcr.io/$PROJECT_ID/tar'
    id: untar-pxf-build-dependencies
    args: [ '-xzf', 'pxf-build-dependencies.tar.gz' ]
    waitFor: [ 'retrieve-pxf-build-dependencies' ]

  - name: 'gcr.io/cloud-builders/gsutil'
    id: retrieve-pxf-automation-dependencies
    args: [ 'cp', 'gs://${_PXF_BUILD_BUCKET}/automation-dependencies/pxf-automation-dependencies.tar.gz', 'pxf-automation-dependencies.tar.gz' ]
    waitFor: [ '-' ]
  - name: 'gcr.io/$PROJECT_ID/tar'
    id: untar-pxf-automation-dependencies
    args: [ '-xzf', 'pxf-automation-dependencies.tar.gz' ]
    waitFor: [ 'retrieve-pxf-automation-dependencies' ]

  # use gradle image with JDK8 to build the project
  - name: openjdk:8-jdk
    id: gradle-build
    entrypoint: bash
    args: [ './server/gradlew', '--gradle-user-home=/workspace/.gradle', '-Dorg.gradle.daemon=false', '-b', './server/build.gradle', 'test', 'stage' ]
    waitFor: [ 'untar-pxf-build-dependencies' ]

  - name: golang:1.17.6
    id: golang-build
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p ./.go-mod-cached-sources
        cp -r ./.go-mod-cached-sources ./cli/go/pkg/mod
        go install github.com/onsi/ginkgo/ginkgo@v1.16.5
        make -C ./cli/go/src/pxf-cli build
        rm -rf ./.go-mod-cached-sources
        mv ./cli/go/pkg/mod ./.go-mod-cached-sources
    waitFor: [ 'untar-pxf-build-dependencies' ]

  # create an updated tarball with build dependencies and upload it
  - name: 'gcr.io/$PROJECT_ID/tar'
    id: tar-pxf-build-dependencies
    args: [ '-czf', 'pxf-build-dependencies.tar.gz', '.gradle', '.go-mod-cached-sources' ]
    waitFor: [ 'gradle-build', 'golang-build' ]
  # Push the pxf-build-dependencies.tar.gz tarball to Google Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [ 'cp', '/workspace/pxf-build-dependencies.tar.gz', 'gs://${_PXF_BUILD_BUCKET}/build-dependencies/pxf-build-dependencies.tar.gz' ]
    waitFor: [ 'tar-pxf-build-dependencies' ]

  # Prepare automation dependencies
  - name: 'gcr.io/cloud-builders/docker'
    id: prepare-automation-deps
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p /workspace/automation_tmp_lib/
        cp ./server/pxf-api/build/libs/pxf-api-*.jar /workspace/automation_tmp_lib/pxf-api.jar
        cp ./server/pxf-hbase/build/libs/pxf-hbase-*.jar /workspace/automation_tmp_lib/pxf-hbase.jar
        cp ./server/pxf-hdfs/build/libs/pxf-hdfs-*.jar /workspace/automation_tmp_lib/pxf-hdfs.jar
        cp ./server/pxf-hive/build/libs/pxf-hive-*.jar /workspace/automation_tmp_lib/pxf-hive.jar
        touch /workspace/automation_tmp_lib/pxf-extras.jar
        ls /workspace/automation_tmp_lib
    waitFor: [ 'gradle-build' ]

  # Package the automation project
  - name: maven:3-jdk-8
    id: mvn-dev-build
    entrypoint: mvn
    args:
      - '-Dmaven.repo.local=/workspace/.m2/repository'
      - '-Djava.awt.headless=true'
      - '-DskipTests=true'
      - '-Dpxf.lib=/workspace/automation_tmp_lib'
      - '-B'
      - '-e'
      - '-f'
      - './automation/pom.xml'
      - 'package'
    waitFor: [ 'prepare-automation-deps', 'untar-pxf-automation-dependencies' ]

  # Run a test in the automation project for additional caching
  - name: maven:3-jdk-8
    id: mvn-test-build
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p /root/pxf/servers/database/ && cp ./server/pxf-service/src/templates/templates/jdbc-site.xml /root/pxf/servers/database/
        mkdir -p /root/pxf/servers/db-session-params/ && cp ./server/pxf-service/src/templates/templates/jdbc-site.xml /root/pxf/servers/db-session-params/
        mkdir -p /root/pxf/servers/db-hive/ && cp ./server/pxf-service/src/templates/templates/jdbc-site.xml /root/pxf/servers/db-hive/
        GPHD_ROOT=/tmp PXF_HOME=/tmp/pxf mvn -B -e -Dpxf.lib=/workspace/automation_tmp_lib -Dtest=HdfsSmokeTest -Djava.awt.headless=true -Dmaven.repo.local=/workspace/.m2/repository -f ./automation/pom.xml -U test || true 
        # create regression-tools directory and copy jars needed by pxf
        mkdir -p regression-tools
        cp $(find . -name avro-tools*.jar) regression-tools
    waitFor: [ 'mvn-dev-build' ]

  # create a tarball with tools used by PXF, for example avro-tools
  - name: 'gcr.io/$PROJECT_ID/tar'
    id: tar-regression-tools
    args: [ '-czf', 'regression-tools.tar.gz', 'regression-tools' ]
    waitFor: [ 'mvn-test-build' ]
  # Push the regression-tools.tar.gz tarball to Google Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [ 'cp', '/workspace/regression-tools.tar.gz', 'gs://${_PXF_BUILD_BUCKET}/regression-dependencies/regression-tools.tar.gz' ]
    waitFor: [ 'tar-regression-tools' ]

  # create an updated tarball with automation dependencies and upload it
  - name: 'gcr.io/$PROJECT_ID/tar'
    id: tar-pxf-automation-dependencies
    args: [ '-czf', 'pxf-automation-dependencies.tar.gz', '.m2' ]
    waitFor: [ 'mvn-test-build' ]
  # Push the pxf-automation-dependencies.tar.gz tarball to Google Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [ 'cp', '/workspace/pxf-automation-dependencies.tar.gz', 'gs://${_PXF_BUILD_BUCKET}/automation-dependencies/pxf-automation-dependencies.tar.gz' ]
    waitFor: [ 'tar-pxf-automation-dependencies' ]
